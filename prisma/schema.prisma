generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(cuid())
  name                String
  email               String        @unique
  password            String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  assignedTasks       Task[]        @relation("TaskAssignee")
  createdTasks        Task[]        @relation("TaskCreator")
  reportedTasks       Task[]        @relation("TaskReporter")
  ownedWorkspaces     Workspace[]   @relation("WorkspaceOwner")
  memberWorkspaces    Workspace[]   @relation("WorkspaceMember")
  updatedTaskVersions TaskVersion[] @relation("VersionUpdater")

  @@map("users")
}

model Workspace {
  id          String       @id @default(cuid())
  name        String
  description String?
  number      String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ownerId     String
  invitations Invitation[]
  spaces      Space[]
  owner       User         @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     User[]       @relation("WorkspaceMember")

  @@map("workspaces")
}

model Space {
  id          String    @id @default(cuid())
  name        String
  description String?
  spaceNumber String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@unique([workspaceId, spaceNumber])
  @@map("spaces")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  comment     String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  tags        String[]
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  taskNumber  Int
  spaceId     String
  creatorId   String
  assigneeId  String?
  reporterId  String
  version     Int        @default(1)
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator     User       @relation("TaskCreator", fields: [creatorId], references: [id])
  reporter    User       @relation("TaskReporter", fields: [reporterId], references: [id])
  space       Space      @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  versions TaskVersion[]

  @@unique([spaceId, taskNumber])
  @@index([version])
  @@map("tasks")
}

model TaskVersion {
  id               String     @id @default(cuid())
  taskId           String
  version          Int
  title            String
  description      String?
  comment          String?
  status           TaskStatus
  priority         Priority
  tags             String[]
  dueDate          DateTime?
  taskNumber       Int
  spaceId          String
  creatorId        String
  assigneeId       String?
  reporterId       String
  taskCreatedAt    DateTime
  updatedBy        String
  updateReason     String?
  versionCreatedAt DateTime   @default(now())
  task             Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  updater          User       @relation("VersionUpdater", fields: [updatedBy], references: [id])

  @@unique([taskId, version])
  @@index([taskId])
  @@index([version])
  @@index([versionCreatedAt])
  @@map("task_versions")
}

model Invitation {
  id          String       @id @default(cuid())
  email       String
  workspaceId String
  status      InviteStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  expiresAt   DateTime
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([email, workspaceId])
  @@map("invitations")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
